import org.apache.tools.ant.filters.EscapeUnicode
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "com.github.johnrengelman.shadow" version "5.1.0"
    id "org.sonarqube" version "2.8"
    id "org.owasp.dependencycheck" version "5.2.2"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

def externalFileName = "$projectDir/.external"
if (file(externalFileName).exists()) {
    apply from: "external.gradle"
} else {
    apply from: "monext.gradle"
}

dependencies {
    testRuntimeOnly group: 'commons-lang', name: 'commons-lang', version: '2.6'

    compile group: 'com.payline', name: 'payment-method-api', version: paymentMethodApiVersion

    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jsVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jsVersion
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: httpComponentVersion
    implementation group: 'com.google.code.gson', name: 'gson', version: gsonVersion

    // JUnit and Mockito
    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: jupiterVersion


    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-server', version: seleniumVersion
    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-support', version: seleniumVersion
    testImplementation group: 'com.payline', name: 'payment-method-integration', version: paymentMethodIntegrationVersion

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Build-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility
        )
    }
}

assemble.dependsOn shadowJar

shadowJar {
    classifier = ''
    dependencies {
        exclude(dependency("com.payline:payment-method-api"))
        exclude(dependency("org.apache.logging.log4j:log4j-api"))
        exclude(dependency("org.apache.logging.log4j:log4j-core"))

        exclude(dependency("org.junit.jupiter:junit-jupiter-params"))
        exclude(dependency("org.junit.jupiter:junit-jupiter-api"))
        exclude(dependency("org.seleniumhq.selenium:selenium-server"))
        exclude(dependency("org.seleniumhq.selenium:selenium-support"))
    }
}


/* Replace tokens in resources files after compilation */
processResources {
    filesMatching('messages_fr.properties') {
        filter(EscapeUnicode)
    }
    filesMatching('release.properties') {
        filter(ReplaceTokens, tokens: [
                'version': project.version.replaceFirst("-.*", ""),
                'date'   : new Date().format("dd/MM/yyyy")
        ])
    }
}

test {
    useJUnitPlatform()
    exclude('**/*IT.class')
}

dependencyCheck {
    format 'ALL'
    skipConfigurations = ['jacocoAgent', 'jacocoAnt', 'annotationProcessor', 'axisGenAntTask', 'jaxws', 'execJar', 'jaxb', 'generateSources']
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}